#include <SoftwareSerial.h>

#include <Adafruit_NeoPixel.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128
// Which pin on the Arduino is connected to the NeoPixels?
#define PIN        3 // On Trinket or Gemma, suggest changing this to 1

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 8 // Popular NeoPixel ring 
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
int buttonState = 0;
int buttonState_BOT = 0;
int var = 1;
// 'Untitled', 128x64px  logo_bmp
const unsigned char logo_bmp [] PROGMEM = {
  // 'Untitled, 128x64px
  0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x06, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x03, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xdf, 0xfb, 0x00, 0x2f, 0xf9, 0xff, 0xff, 0xf9, 0x0b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x5f, 0xf9, 0x00, 0x6f, 0xf9, 0xff, 0xff, 0xfc, 0x8b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x5f, 0xf9, 0x00, 0x4f, 0xf9, 0xff, 0xff, 0xfe, 0x4b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x5f, 0xf9, 0x00, 0x4f, 0xf9, 0xff, 0xff, 0xff, 0x2b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x4f, 0xf9, 0x00, 0x4f, 0xf9, 0xff, 0xff, 0xff, 0x1b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x4f, 0xfd, 0x00, 0x4f, 0xf9, 0xff, 0xff, 0xff, 0x9b, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x4f, 0xfd, 0x80, 0xdf, 0xf9, 0xff, 0xff, 0xff, 0xcb, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x6f, 0xfd, 0xff, 0xdf, 0xf9, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x2f, 0xfc, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x7f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x2f, 0xfc, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x3f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x2f, 0xfc, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x1f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x27, 0xfc, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x0f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x27, 0xfc, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x27, 0xfe, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x27, 0xfe, 0x00, 0x3f, 0xf1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x17, 0xfe, 0x00, 0x3f, 0xf1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x17, 0xfe, 0x00, 0x3f, 0xf1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x17, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x13, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x13, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x13, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x13, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x1b, 0xff, 0x00, 0x7f, 0xe1, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x0b, 0xff, 0x7f, 0x7f, 0xe9, 0xfe, 0x7f, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x0b, 0xff, 0x7f, 0x7f, 0xed, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x09, 0xff, 0x7f, 0x7f, 0xed, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x09, 0xff, 0x3e, 0x7f, 0xcd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x09, 0xff, 0x3e, 0x7f, 0xcd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x09, 0xff, 0x3e, 0x7f, 0xcd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x0d, 0xff, 0x3e, 0x7f, 0xcd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x05, 0xff, 0x3e, 0x7f, 0xdd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x05, 0xff, 0xbe, 0xff, 0xdd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x04, 0xff, 0xbe, 0xff, 0xdd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x04, 0xff, 0xbe, 0xff, 0xdd, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x04, 0xff, 0x9c, 0xff, 0x9d, 0xfe, 0xff, 0xf7, 0xfb, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 
  0x04, 0xff, 0x80, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x06, 0xff, 0x80, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0xff, 0x80, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0xff, 0x80, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0x7f, 0xc1, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0x7f, 0xc1, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0x7f, 0xc1, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x02, 0x7f, 0xc1, 0xff, 0x81, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x03, 0x7f, 0xc1, 0xff, 0x01, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x7f, 0xc1, 0xff, 0x01, 0xfe, 0x00, 0x07, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x7f, 0xc1, 0xff, 0x01, 0xfe, 0x00, 0x0f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x3f, 0xc1, 0xff, 0x01, 0xfe, 0x00, 0x1f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x3f, 0xe3, 0xff, 0x01, 0xfe, 0x00, 0x3f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x3f, 0xe3, 0xff, 0x01, 0xfe, 0x00, 0x7f, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x3f, 0xe3, 0xff, 0x01, 0xfe, 0x00, 0x7f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0xbf, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x00, 0xbf, 0xff, 0xff, 0x7d, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0xbf, 0xff, 0xfe, 0x4d, 0xff, 0xff, 0xff, 0xcb, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xbf, 0xff, 0xfe, 0x4d, 0xff, 0xff, 0xff, 0x9b, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x9f, 0xff, 0xfe, 0x4d, 0xff, 0xff, 0xff, 0x3b, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x9f, 0xff, 0xfe, 0x4d, 0xff, 0xff, 0xfe, 0x4b, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x9f, 0xff, 0xfe, 0xcd, 0xff, 0xff, 0xfc, 0xcb, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xdf, 0xff, 0xfe, 0x8d, 0xff, 0xff, 0xf9, 0x8b, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x40, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x40, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00
};



void setup() {
  Serial.begin(9600);
  pinMode(7, INPUT); // these ate the input of the touch capacitors.
  pinMode(6, INPUT);
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  display.clearDisplay();

  
}

void loop() {

  switch (var) {
  case 1:
  LED_LOGO();
  var=2;
  break;
  case 2:
  Messages_GoodLuck();
  break;
  case 3 :
  Messages_CallVJ();
  break;
  case 4 :
  Messages();
  break;
  case 5 :
  TeamWork();
  break;
  case 6:
  Software_issue();
  break;
  case 7:
  Frans();
  break;
  case 8:
  Msg1();
  break;
  case 9:
  Msg2();
  break;
  case 10:
  Msg4();
  break;
  case 11:
  Msg5();
  break;
   case 12:
  Messages_GoodOutofScope(); 
  break; 
  case 13:
  Messages_Criticalissue(); 
  break; 
  case 14:
  Msg6(); 
  break;
 case 15:
  Msg7(); 
  break;
   case 16:
  Msg8(); 
  break;
  default:


      // if nothing else matches, do the default
    // default is optional
    break;
}

  buttonState = digitalRead(7);
  buttonState_BOT = digitalRead(6);// Bottom button on the Gripper

 if ((buttonState == 1)||(buttonState_BOT==1))
 {
var = var + 1;
 }
if (var>16  )
{
  var=2;
}
}


void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void LED_LOGO(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2


void Messages(void)
{

  display.clearDisplay();
  display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Arjen sais it is     definitely in        the scope"));
  display.display();      // Show initial text
  delay(200);
  
 
}

void Messages_GoodLuck(void) 
{
 display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Pieter, Good Luck in your new job"));
  display.display();      // Show initial text
  delay(200);

}

void Messages_GoodOutofScope(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("My heart belongs to  MK7"));
  display.display();      // Show initial text
  delay(200);

}

void Messages_Criticalissue(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("We only have 122     issues"));
  display.display();      // Show initial text
  delay(200);

}

void Messages_CallVJ(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("I need your planning VJ!"));
  display.display();      // Show initial text
  delay(200);

}

void Software_issue(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("It's definitely SW   issue!"));
  display.display();      // Show initial text
  delay(200);

}

void TeamWork(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Teamwork makes the   dream work"));
  display.display();      // Show initial text
  delay(200);

}

void Frans(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Ik wens je een mooie toekomst met veel    (be)grip! Keep in    touch. Frans"));
  display.display();      // Show initial text
  delay(200);

}

void Msg1(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Mind your language!"));
  display.display();      // Show initial text
  delay(200);

}

void Msg2(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("*#&? ASML"));
  display.display();      // Show initial text
  delay(200);

}

void Msg3(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Pieter puts leader in Project Leader"));
  display.display();      // Show initial text
  delay(200);

}

void Msg4(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("You missing us now, `stop thinking of us, you moved on ;)"));
  display.display();      // Show initial text
  delay(200);

}

void Msg5(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("We miss you all of   the best"));
  display.display();      // Show initial text
  delay(200);

}
void Msg6(void) 
{
    display.clearDisplay();
 display.setTextSize(4); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("LET'S GO!!"));
  display.display();      // Show initial text
  delay(200);

}

void Msg7(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("This device comes    with a deviation note"));
  display.display();      // Show initial text
  delay(200);

}

void Msg8(void) 
{
    display.clearDisplay();
 display.setTextSize(1.5); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("If there are ever    issues with this     please phone team VJ and JP we are always available :)"));
  display.display();      // Show initial text
  delay(200);

}
